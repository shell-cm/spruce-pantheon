<?php

use Drupal\Core\Routing\RouteMatch;
use Drupal\views\Routing\ViewPageController;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;


/**
 * Implements hook_preprocess_HOOK() for images.
 * 
 * Adding the emerging standard to lazy-load all images. See https://addyosmani.com/blog/lazy-loading/
 */

function spruce_preprocess_image(&$variables) {
  $variables['attributes']['loading'] = ['lazy',];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for images.
 */
function spruce_theme_suggestions_image_alter(array &$suggestions, array $variables) {

  $style_name = $variables['style_name'];

  $suggestions[] = 'image__' . $style_name;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for container templates.
 *
 * Add suggestions, as by default none are provided.
 */
function spruce_theme_suggestions_container_alter(array &$suggestions, array $variables) {

  $element = $variables['element'];

  // We cannot count on template_preprocess_container having run, so we copy
  // its logic here to provide templates for forms (has parents) or not forms.
  // Special handling for form elements.
  if (isset($element['#array_parents'])) {
    $suggestions[] = 'container__has_parent';
  }
  else {
    $suggestions[] = 'container__no_parent';
  }

  if (isset($element['#type']) && $element['#type'] != 'container') {
    $suggestions[] = 'container__' . $element['#type'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__view__' . $element['#name'];
    $suggestions[] = 'container__view__' . $element['#name'] . '__' . $element['#display_id'];
  }
  elseif (isset($element['widget'][0]['#type']) && $element['widget'][0]['#type'] === 'managed_file') {
    $suggestions[] = 'container__file';
    $suggestions[] = 'container__file__' . $element['widget']['#field_name'];
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for fields.
 */
function spruce_theme_suggestions_field_alter(array &$suggestions, array $variables) {

  $element = $variables['element'];

  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];

  $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $bundle . '__' . $field_name . '__' . $view_mode;

    // Only for selected display mode formatter.
  if (isset($variables['element']['#formatter'])
    && $variables['element']['#formatter'] === 'entity_reference_display_default'
  ) {
    // Add display mode class for field wrapper.
    if (!empty($variables['element'][0]['#view_mode'])) {
      $suggestions[] = 'field__' . $field_name . '__' . $view_mode. '__' . $variables['element'][0]['#view_mode'];
      $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode. '__' . $variables['element'][0]['#view_mode'];
      $suggestions[] = 'field__' . $entity_type . '__' . $bundle . '__' . $field_name . '__' . $view_mode. '__' . $variables['element'][0]['#view_mode'];
    }
  }


  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for fields.
 */
function spruce_theme_suggestions_item_list_alter(array &$suggestions, array $variables) {

  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'item_list__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'item_list__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_view_field__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_view_field__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_eva_display_entity_view_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'eva_display_entity_view__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'eva_display_entity_view__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_view_fields__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_view_fields__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_view__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_view__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_view_unformatted__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_view_unformatted__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_view_grid_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_view_grid__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_view_grid__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_view_list_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_view_list__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_view_list__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_view_summary_unformatted_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_view_summary_unformatted__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_view_summary_unformatted__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_views_accordion_view_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');

  if (!empty($request1)) {
    $suggestions[] = 'views_accordion_view__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'views_accordion_view__' . $request2;
  }

  return $suggestions;
}

/**
* Implements hook_theme_suggestions_HOOK_alter()
*/
function spruce_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $request1 = \Drupal::routeMatch()->getRouteObject()->getDefault('display_id');
  $request2 = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');
  $request3 = $variables['element']['#form_id'];

  if (!empty($request3)) {
    $suggestions[] = 'form__' . $request3;
  }
  if (!empty($request1)) {
    $suggestions[] = 'form__' . $request1;
  }
  if ((!empty($request2)) && ($request1 != $request2)) {
    $suggestions[] = 'form__' . $request2 . '__' . $request1;
  }
    if ((!empty($request2)) && ($request1 != $request2) && (!empty($request3))) {
    $suggestions[] = 'form__' . $request3 . '__' . $request2 . '__' . $request1;
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_form_element().
 */
function spruce_theme_suggestions_form_element(array $variables) {
  $suggestions = ['form_element__type__' . $variables['element']['#type']];
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element__form_id__' . $variables['element']['#form_id'];
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'] . '__' . $variables['element']['#type'];
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_form_element_label().
 */
function spruce_theme_suggestions_form_element_label(array $variables) {
  $suggestions = [];
  if (isset($variables['element']['#form_element_type'])) {
    $suggestions[] = 'form_element_label__type__' . $variables['element']['#form_element_type'];
  }
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element_label__form-id__' . $variables['element']['#form_id'];
  }
  if (isset($variables['element']['#form_element_type']) && isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element_label__' . $variables['element']['#form_id'] . '__' . $variables['element']['#form_element_type'];
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_form_element().
 */
function spruce_preprocess_form_element(array &$variables) {
  if (!isset($variables['label'])) {
    return;
  }

  if (isset($variables['element']['#form_id'])) {
    $variables['label']['#form_id'] = $variables['element']['#form_id'];
  }
  if (isset($variables['element']['#type'])) {
    $variables['label']['#form_element_type'] = $variables['element']['#type'];
  }
}

/**
 * Implements hook_form_alter().
 */
function spruce_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  spruce_attach_form_id($form, $form_id);
}

/**
 * Attaches form id to all form elements.
 *
 * @param array $form
 *   The form or form element which children should have form id attached.
 * @param string $form_id
 *   The form id attached to form elements.
 */
function spruce_attach_form_id(array &$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    spruce_attach_form_id($form[$child], $form_id);
  }
}
