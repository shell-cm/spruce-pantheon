<?php


namespace Drupal\miniorange_saml;

use Drupal\miniorange_saml\MiniorangeSAMLConstants;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\GuzzleException;
class MiniorangeSAMLCustomer
{
    public $email;
    public $phone;
    public $customerKey;
    public $transactionId;
    public $password;
    public $otpToken;
    private $defaultCustomerId;
    private $defaultCustomerApiKey;
    public function __construct($vd, $YV, $ir, $LI)
    {
        $this->email = $vd;
        $this->phone = $YV;
        $this->password = $ir;
        $this->otpToken = $LI;
        $this->defaultCustomerId = "\61\x36\x35\x35\x35";
        $this->defaultCustomerApiKey = "\146\x46\x64\x32\130\143\x76\124\x47\104\x65\x6d\132\166\x62\x77\x31\142\143\125\145\x73\116\112\127\x45\x71\x4b\x62\x62\x55\x71";
    }
    public function checkCustomer()
    {
        if (Utilities::isCurlInstalled()) {
            goto ks;
        }
        return json_encode(array("\163\x74\x61\x74\165\163" => "\103\125\x52\114\x5f\x45\x52\122\117\122", "\163\x74\x61\164\x75\163\x4d\x65\163\x73\x61\147\145" => "\74\x61\x20\x68\162\x65\x66\75\42\150\x74\164\160\72\x2f\x2f\x70\150\160\x2e\x6e\145\x74\57\x6d\141\x6e\165\x61\154\x2f\x65\156\x2f\143\165\162\x6c\56\151\x6e\163\164\141\154\x6c\141\164\151\157\x6e\x2e\160\150\160\42\x3e\x50\110\x50\x20\x63\125\122\114\40\145\x78\x74\x65\156\x73\x69\157\156\x3c\57\141\76\x20\151\x73\x20\x6e\x6f\164\40\151\156\163\x74\x61\154\x6c\145\x64\40\x6f\x72\x20\144\x69\x73\x61\x62\x6c\145\144\x2e"));
        ks:
        $sc = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\x6f\x61\x73\x2f\162\x65\x73\x74\57\143\x75\163\164\157\155\145\162\57\143\150\145\143\x6b\x2d\151\x66\55\x65\x78\151\x73\x74\163";
        $vd = $this->email;
        $Cm = array("\x65\155\141\151\154" => $vd);
        $SI = json_encode($Cm);
        try {
            $Yq = \Drupal::httpClient()->request("\120\x4f\123\124", $sc, ["\142\x6f\x64\x79" => $SI, "\141\154\x6c\157\x77\137\162\x65\x64\x69\162\x65\143\x74\163" => TRUE, "\x68\164\164\160\x5f\145\162\162\157\x72\163" => FALSE, "\144\x65\x63\x6f\144\x65\x5f\x63\157\x6e\x74\x65\156\164" => true, "\166\x65\x72\151\x66\x79" => FALSE, "\x68\145\x61\144\x65\x72\x73" => array("\103\157\156\x74\x65\156\x74\x2d\124\171\x70\x65" => "\141\x70\x70\x6c\x69\x63\141\164\151\157\x6e\57\x6a\x73\157\x6e", "\101\165\x74\x68\x6f\x72\x69\172\x61\x74\151\157\156" => "\x42\141\x73\x69\x63")]);
            return $Yq->getBody()->getContents();
        } catch (\Exception $J9) {
            \Drupal::logger("\155\x69\x6e\x69\157\162\141\156\147\145\x5f\163\141\x6d\x6c")->notice("\x45\162\162\x6f\x72\40\141\x74\40\45\155\145\164\x68\157\144\x20\x6f\146\x20\45\x66\x69\x6c\145\x3a\40\45\x65\162\162\157\162", array("\45\x6d\x65\x74\150\157\144" => "\143\150\x65\x63\153\103\x75\163\164\x6f\155\145\162", "\45\x66\151\154\x65" => "\x63\165\163\x74\x6f\x6d\145\162\x5f\x73\145\x74\x75\x70\x2e\x70\150\160", "\x25\x65\162\162\157\162" => $J9->getMessage()));
        }
    }
    public function getCustomerKeys()
    {
        if (Utilities::isCurlInstalled()) {
            goto vm;
        }
        return json_encode(array("\x61\160\151\x4b\x65\x79" => "\103\125\x52\x4c\x5f\x45\x52\x52\117\122", "\164\x6f\x6b\145\156" => "\74\141\40\x68\162\145\x66\x3d\42\x68\164\x74\160\x3a\57\57\x70\x68\x70\56\156\x65\x74\57\155\x61\156\165\x61\154\57\145\x6e\x2f\x63\x75\x72\x6c\56\151\156\x73\164\141\154\154\141\164\x69\x6f\156\x2e\x70\x68\x70\x22\x3e\120\x48\x50\40\x63\x55\x52\114\x20\145\170\164\145\156\163\x69\x6f\x6e\74\57\141\76\40\151\163\40\x6e\157\x74\40\x69\156\x73\x74\141\154\154\x65\x64\40\x6f\162\40\x64\151\x73\x61\x62\154\145\x64\56"));
        vm:
        $sc = MiniorangeSAMLConstants::BASE_URL . "\57\x6d\x6f\x61\x73\57\x72\145\163\164\57\x63\x75\x73\x74\x6f\x6d\x65\162\x2f\x6b\x65\x79";
        $vd = $this->email;
        $ir = $this->password;
        $Cm = array("\x65\x6d\141\151\154" => $vd, "\x70\141\x73\163\x77\157\x72\x64" => $ir);
        $Wa = json_encode($Cm);
        try {
            $Yq = \Drupal::httpClient()->request("\120\117\x53\124", $sc, ["\142\x6f\x64\171" => $Wa, "\141\154\154\157\x77\x5f\x72\145\x64\151\x72\x65\x63\x74\163" => TRUE, "\150\x74\164\160\137\145\x72\162\157\162\163" => FALSE, "\x64\x65\x63\x6f\144\145\137\x63\x6f\156\164\145\156\164" => true, "\x76\145\x72\151\146\171" => FALSE, "\x68\x65\x61\x64\x65\162\x73" => array("\x43\x6f\x6e\164\145\x6e\x74\55\124\x79\160\145" => "\141\x70\x70\x6c\151\143\x61\x74\151\x6f\x6e\57\x6a\163\x6f\x6e", "\x41\x75\x74\x68\x6f\x72\151\172\x61\164\x69\157\156" => "\x42\141\x73\x69\x63")]);
            return $Yq->getBody()->getContents();
        } catch (\Exception $J9) {
            \Drupal::logger("\x6d\151\156\151\x6f\x72\141\x6e\x67\x65\137\x73\141\155\x6c")->notice("\105\162\162\x6f\x72\x20\x61\164\x20\x25\x6d\145\164\150\x6f\x64\x20\157\x66\40\x25\146\151\154\x65\x3a\40\45\145\162\x72\x6f\162", array("\45\x6d\145\x74\150\157\x64" => "\x63\x68\145\x63\153\103\165\163\x74\x6f\x6d\x65\x72", "\x25\146\x69\154\x65" => "\x63\x75\163\x74\157\155\x65\162\137\163\x65\164\x75\x70\56\160\150\160", "\45\x65\x72\x72\157\162" => $J9->getMessage()));
        }
    }
    function verifyLicense($U6)
    {
        $sc = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\157\141\x73\x2f\141\160\x69\57\142\141\x63\153\165\x70\143\x6f\144\145\x2f\x76\145\162\x69\x66\171";
        $dh = \Drupal::config("\155\x69\x6e\x69\157\x72\x61\x6e\147\145\x5f\x73\141\x6d\154\56\163\145\164\164\x69\156\x67\163")->get("\155\x69\156\x69\157\162\x61\156\x67\145\137\x73\x61\155\154\x5f\143\x75\163\x74\x6f\155\x65\162\x5f\x69\x64");
        $iE = \Drupal::config("\x6d\151\156\151\157\x72\x61\156\x67\145\x5f\163\141\x6d\154\56\x73\145\x74\164\x69\156\147\x73")->get("\155\x69\156\x69\x6f\x72\x61\156\147\145\x5f\163\141\155\x6c\x5f\143\x75\163\164\x6f\155\x65\162\x5f\141\160\x69\137\153\145\x79");
        global $base_url;
        $rY = round(microtime(true) * 1000);
        $LP = $dh . number_format($rY, 0, '', '') . $iE;
        $ts = hash("\x73\150\141\65\61\x32", $LP);
        $eu = "\x43\165\x73\164\x6f\x6d\x65\x72\x2d\113\145\171\x3a\40" . $dh;
        $t3 = "\124\x69\x6d\x65\163\164\x61\155\160\72\40" . number_format($rY, 0, '', '');
        $Dg = "\101\x75\164\x68\x6f\x72\151\x7a\141\164\x69\x6f\156\x3a\x20" . $ts;
        $Cm = '';
        $Cm = array("\x63\157\144\145" => $U6, "\x63\165\x73\164\157\x6d\x65\162\x4b\x65\x79" => $dh, "\x61\x64\144\151\164\x69\157\156\x61\x6c\106\x69\x65\x6c\x64\163" => array("\x66\x69\145\154\x64\61" => $base_url));
        $Wa = json_encode($Cm);
        try {
            $Yq = \Drupal::httpClient()->request("\120\117\123\x54", $sc, ["\142\157\144\171" => $Wa, "\141\x6c\154\157\x77\x5f\x72\145\x64\x69\162\145\143\x74\163" => TRUE, "\x68\x74\x74\160\x5f\x65\162\x72\x6f\162\163" => FALSE, "\x64\145\143\157\144\145\x5f\143\157\x6e\x74\x65\x6e\164" => true, "\166\x65\x72\x69\x66\x79" => FALSE, "\x68\x65\x61\x64\145\162\163" => array("\103\157\x6e\x74\x65\156\x74\x2d\124\x79\x70\x65" => "\141\x70\160\154\151\x63\x61\x74\x69\157\x6e\x2f\152\x73\157\x6e", "\x43\165\x73\x74\x6f\155\145\162\55\x4b\x65\171" => $dh, "\124\x69\x6d\145\x73\x74\141\155\x70" => $rY, "\x41\165\x74\x68\157\162\151\x7a\141\164\x69\157\156" => $ts)]);
            return $Yq->getBody()->getContents();
        } catch (\Exception $J9) {
            \Drupal::logger("\x6d\x69\x6e\151\157\x72\141\156\147\x65\x5f\x73\x61\155\154")->notice("\x45\x72\162\x6f\x72\x20\141\x74\40\45\155\145\164\x68\157\x64\x20\x6f\146\x20\x25\146\151\154\145\72\40\x25\x65\162\x72\157\162", array("\x25\x6d\x65\x74\x68\x6f\144" => "\x63\150\145\x63\153\x43\x75\163\x74\157\155\145\162", "\x25\x66\151\154\x65" => "\x63\165\163\x74\157\x6d\145\x72\137\163\x65\164\165\160\x2e\x70\x68\x70", "\45\145\162\162\x6f\162" => $J9->getMessage()));
        }
    }
    function updateStatus()
    {
        $sc = MiniorangeSAMLConstants::BASE_URL . "\57\155\x6f\x61\163\x2f\x61\x70\x69\57\x62\141\x63\x6b\165\x70\x63\x6f\x64\145\x2f\x75\160\144\141\164\x65\x73\164\x61\164\165\x73";
        $dh = \Drupal::config("\x6d\151\x6e\151\157\162\141\156\147\145\x5f\163\141\155\x6c\x2e\163\x65\164\x74\151\x6e\147\x73")->get("\155\x69\156\151\157\162\141\x6e\147\x65\x5f\163\x61\x6d\154\137\x63\165\x73\164\x6f\x6d\145\x72\x5f\151\144");
        $iE = \Drupal::config("\155\151\x6e\x69\x6f\162\141\156\147\x65\x5f\163\141\x6d\154\x2e\x73\145\164\164\x69\x6e\147\x73")->get("\x6d\x69\x6e\x69\x6f\x72\x61\x6e\147\145\x5f\x73\x61\x6d\x6c\137\x63\x75\x73\164\157\155\x65\162\137\x61\x70\x69\137\x6b\145\171");
        $rY = round(microtime(true) * 1000);
        $LP = $dh . number_format($rY, 0, '', '') . $iE;
        $ts = hash("\x73\150\141\65\x31\62", $LP);
        $eu = "\x43\x75\163\x74\157\155\145\162\x2d\113\x65\171\x3a\40" . $dh;
        $t3 = "\124\x69\x6d\145\x73\164\x61\155\x70\72\40" . number_format($rY, 0, '', '');
        $Dg = "\x41\165\164\x68\x6f\162\x69\172\141\164\151\x6f\x6e\x3a\40" . $ts;
        $yQ = \Drupal::config("\x6d\x69\156\x69\157\x72\141\156\x67\x65\x5f\x73\x61\155\x6c\56\x73\x65\x74\164\151\156\147\163")->get("\155\x69\156\151\157\x72\x61\x6e\147\x65\137\163\141\155\154\x5f\x63\165\x73\164\x6f\155\x65\162\137\141\x64\x6d\151\x6e\x5f\164\157\x6b\x65\x6e");
        $U6 = AESEncryption::decrypt_data(\Drupal::config("\155\151\156\151\157\162\x61\156\x67\x65\137\163\141\155\x6c\x2e\x73\145\164\x74\151\156\147\163")->get("\155\151\x6e\151\157\x72\141\x6e\147\145\x5f\x73\141\x6d\154\137\154\x69\x63\145\156\163\x65\137\x6b\145\x79"), $yQ);
        $Cm = array("\x63\x6f\144\145" => $U6, "\x63\x75\163\164\x6f\155\145\x72\113\145\171" => $dh);
        $Wa = json_encode($Cm);
        try {
            $Yq = \Drupal::httpClient()->request("\120\x4f\123\x54", $sc, ["\142\157\x64\171" => $Wa, "\x61\x6c\x6c\x6f\167\137\x72\x65\x64\x69\x72\x65\x63\x74\163" => TRUE, "\x68\x74\164\160\137\x65\x72\x72\x6f\162\x73" => FALSE, "\x64\145\x63\x6f\x64\145\x5f\x63\x6f\x6e\164\145\156\x74" => true, "\166\x65\162\151\146\171" => FALSE, "\x68\x65\x61\144\145\x72\x73" => array("\x43\x6f\156\164\145\x6e\x74\55\x54\x79\160\145" => "\141\160\x70\154\x69\143\x61\164\x69\157\x6e\x2f\152\x73\157\156", "\103\165\x73\x74\157\x6d\145\x72\x2d\113\145\171" => $dh, "\124\151\x6d\x65\x73\164\141\155\x70" => $rY, "\x41\165\164\x68\157\x72\x69\x7a\x61\x74\151\x6f\x6e" => $ts)]);
            return $Yq->getBody()->getContents();
        } catch (\Exception $J9) {
            echo "\x52\x65\161\165\x65\x73\x74\x20\105\162\162\x6f\162\72" . $J9->getMessage();
        }
    }
    function ccl()
    {
        $sc = MiniorangeSAMLConstants::BASE_URL . "\57\x6d\x6f\141\163\57\x72\145\x73\x74\57\x63\165\x73\164\157\155\x65\162\x2f\154\151\143\145\156\163\145";
        $dh = \Drupal::config("\x6d\x69\156\151\157\162\141\156\147\x65\x5f\163\141\155\154\x2e\x73\x65\x74\164\151\x6e\147\163")->get("\x6d\x69\x6e\151\157\x72\141\156\x67\145\x5f\x73\x61\x6d\154\x5f\143\x75\x73\164\157\155\x65\x72\137\151\x64");
        $iE = \Drupal::config("\155\151\x6e\151\157\162\141\156\x67\x65\x5f\x73\x61\x6d\154\x2e\x73\x65\164\x74\x69\x6e\147\163")->get("\x6d\x69\x6e\x69\x6f\162\141\x6e\x67\x65\137\x73\141\155\x6c\x5f\x63\165\x73\x74\x6f\155\x65\x72\137\x61\160\x69\x5f\153\145\171");
        $rY = round(microtime(TRUE) * 1000);
        $LP = $dh . number_format($rY, 0, '', '') . $iE;
        $ts = hash("\x73\x68\x61\x35\61\62", $LP);
        $eu = "\103\x75\163\x74\x6f\155\145\x72\55\113\x65\171\x3a\x20" . $dh;
        $t3 = "\x54\151\155\x65\163\x74\x61\155\160\72\40" . number_format($rY, 0, '', '');
        $Dg = "\x41\x75\164\x68\x6f\x72\x69\x7a\x61\164\151\x6f\156\72\x20" . $ts;
        $Cm = array("\x63\165\x73\164\157\155\x65\162\x49\144" => $dh, "\141\x70\x70\x6c\151\143\x61\164\151\x6f\156\116\x61\x6d\145" => Utilities::getSamlRequestPlanName());
        $Wa = json_encode($Cm);
        try {
            $Yq = \Drupal::httpClient()->request("\120\x4f\123\124", $sc, ["\x62\x6f\144\171" => $Wa, "\141\x6c\154\157\167\137\162\145\144\151\162\145\143\164\x73" => TRUE, "\150\164\164\x70\137\x65\162\162\157\x72\163" => FALSE, "\144\145\x63\157\144\145\137\x63\x6f\156\164\x65\x6e\x74" => true, "\x76\x65\x72\x69\x66\x79" => FALSE, "\150\x65\141\x64\145\x72\x73" => array("\103\x6f\x6e\164\x65\x6e\x74\55\x54\171\160\x65" => "\141\x70\160\x6c\151\143\141\x74\151\x6f\156\x2f\152\163\157\x6e", "\x43\165\x73\164\x6f\155\x65\x72\x2d\x4b\145\x79" => $dh, "\124\x69\155\145\x73\164\141\155\160" => $rY, "\x41\165\x74\150\x6f\x72\x69\x7a\141\164\x69\x6f\x6e" => $ts)]);
            return $Yq->getBody()->getContents();
        } catch (\Exception $J9) {
            echo "\122\145\161\165\145\163\164\x20\105\x72\x72\x6f\162\72" . $J9->getMessage();
        }
    }
}
