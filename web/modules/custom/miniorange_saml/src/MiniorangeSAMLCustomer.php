<?php


namespace Drupal\miniorange_saml;

use Drupal\miniorange_saml\MiniorangeSAMLConstants;
use GuzzleHttp\Exception\RequestException;
class MiniorangeSAMLCustomer
{
    public $email;
    public $phone;
    public $customerKey;
    public $transactionId;
    public $password;
    public $otpToken;
    private $defaultCustomerId;
    private $defaultCustomerApiKey;
    public function __construct($S_, $vT, $lB, $lr)
    {
        $this->email = $S_;
        $this->phone = $vT;
        $this->password = $lB;
        $this->otpToken = $lr;
        $this->defaultCustomerId = "\61\66\65\x35\x35";
        $this->defaultCustomerApiKey = "\146\x46\x64\62\130\x63\x76\124\107\104\x65\x6d\x5a\x76\x62\167\61\142\x63\x55\x65\163\x4e\112\x57\105\x71\113\142\142\x55\x71";
    }
    public function checkCustomer()
    {
        if (Utilities::isCurlInstalled()) {
            goto xK;
        }
        return json_encode(array("\x73\x74\141\x74\165\x73" => "\x43\x55\x52\114\137\x45\122\122\x4f\122", "\163\164\x61\164\165\x73\x4d\x65\x73\x73\x61\147\x65" => "\x3c\x61\40\150\x72\145\x66\x3d\42\150\164\164\x70\x3a\57\57\x70\x68\x70\x2e\x6e\145\164\57\155\x61\x6e\165\141\x6c\x2f\x65\156\x2f\143\x75\x72\x6c\56\151\x6e\x73\x74\x61\x6c\x6c\141\164\x69\157\156\56\x70\x68\x70\42\x3e\x50\110\x50\40\143\x55\122\114\x20\145\x78\164\x65\x6e\163\x69\x6f\x6e\74\x2f\x61\76\40\x69\x73\40\x6e\157\164\40\x69\x6e\163\x74\x61\x6c\154\145\144\x20\157\162\x20\x64\151\x73\141\x62\x6c\x65\144\x2e"));
        xK:
        $nD = MiniorangeSAMLConstants::BASE_URL . "\x2f\x6d\x6f\x61\163\57\162\145\163\x74\x2f\x63\x75\x73\x74\x6f\x6d\x65\x72\57\x63\150\x65\143\153\55\x69\x66\55\x65\x78\151\163\x74\x73";
        $S_ = $this->email;
        $HL = array("\x65\x6d\141\151\154" => $S_);
        $f7 = json_encode($HL);
        try {
            $DI = \Drupal::httpClient()->request("\x50\x4f\x53\x54", $nD, ["\142\x6f\144\x79" => $f7, "\141\x6c\154\x6f\167\x5f\x72\x65\x64\x69\x72\x65\143\x74\x73" => TRUE, "\x68\x74\x74\x70\x5f\145\x72\162\x6f\162\x73" => FALSE, "\144\x65\x63\157\x64\145\137\x63\157\x6e\164\145\x6e\164" => true, "\x76\x65\162\151\146\171" => FALSE, "\x68\x65\141\x64\145\162\x73" => array("\103\x6f\x6e\x74\x65\156\x74\55\x54\171\160\x65" => "\x61\x70\160\x6c\x69\x63\x61\x74\x69\157\x6e\x2f\152\163\157\156", "\x41\x75\x74\x68\x6f\x72\x69\x7a\141\164\151\x6f\156" => "\x42\x61\x73\151\143")]);
            return $DI->getBody()->getContents();
        } catch (RequestException $kn) {
            \Drupal::logger("\155\151\x6e\151\157\x72\x61\x6e\x67\145\137\163\141\155\x6c")->notice("\105\x72\162\x6f\x72\x20\141\x74\40\45\x6d\145\x74\150\157\x64\x20\x6f\x66\x20\45\x66\151\154\x65\x3a\40\x25\145\x72\162\x6f\162", array("\45\155\145\x74\150\x6f\144" => "\x63\150\145\x63\x6b\x43\165\163\x74\157\155\x65\x72", "\45\x66\151\154\145" => "\x63\x75\163\164\x6f\x6d\x65\162\137\163\x65\164\165\160\x2e\x70\x68\160", "\45\x65\162\x72\x6f\162" => $kn->getMessage()));
        }
    }
    public function getCustomerKeys()
    {
        if (Utilities::isCurlInstalled()) {
            goto Nn;
        }
        return json_encode(array("\x61\160\x69\113\145\x79" => "\103\125\122\x4c\137\x45\122\122\117\122", "\x74\x6f\x6b\x65\156" => "\x3c\141\x20\x68\162\145\x66\75\42\150\164\164\x70\x3a\57\x2f\160\x68\x70\x2e\156\x65\164\57\155\x61\x6e\x75\x61\154\x2f\145\x6e\x2f\x63\165\x72\154\56\x69\x6e\163\x74\x61\x6c\154\x61\x74\x69\157\156\56\x70\x68\x70\42\76\120\x48\120\40\143\x55\122\x4c\40\145\x78\x74\145\156\163\151\157\156\74\57\141\76\40\151\163\40\x6e\x6f\x74\40\151\156\163\x74\x61\x6c\154\x65\144\x20\157\162\x20\x64\151\163\x61\142\154\x65\144\56"));
        Nn:
        $nD = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\x6f\x61\x73\57\x72\x65\x73\x74\57\x63\165\163\x74\157\155\x65\162\x2f\x6b\x65\x79";
        $S_ = $this->email;
        $lB = $this->password;
        $HL = array("\145\155\141\x69\154" => $S_, "\160\141\x73\163\x77\157\x72\x64" => $lB);
        $b1 = json_encode($HL);
        try {
            $DI = \Drupal::httpClient()->request("\x50\117\123\x54", $nD, ["\142\157\144\x79" => $b1, "\x61\x6c\154\157\x77\137\x72\x65\144\151\162\145\x63\x74\x73" => TRUE, "\x68\164\x74\x70\x5f\145\x72\162\x6f\x72\x73" => FALSE, "\x64\145\143\157\x64\x65\x5f\x63\x6f\156\x74\145\156\164" => true, "\166\145\x72\151\146\x79" => FALSE, "\x68\x65\x61\144\x65\162\x73" => array("\x43\x6f\x6e\x74\x65\156\164\55\x54\171\x70\x65" => "\x61\x70\x70\x6c\x69\x63\x61\164\151\x6f\x6e\x2f\152\163\157\x6e", "\101\165\164\x68\x6f\162\151\172\x61\x74\151\157\156" => "\102\141\163\151\143")]);
            return $DI->getBody()->getContents();
        } catch (RequestException $kn) {
            \Drupal::logger("\155\x69\x6e\151\157\162\x61\x6e\147\x65\137\x73\x61\x6d\154")->notice("\105\162\x72\x6f\x72\40\141\x74\x20\x25\x6d\x65\x74\x68\157\144\40\x6f\146\40\45\146\151\154\145\x3a\40\45\x65\162\162\x6f\162", array("\45\155\145\x74\x68\157\x64" => "\x63\150\x65\143\153\103\x75\x73\x74\157\x6d\145\162", "\45\146\151\x6c\x65" => "\143\165\163\164\157\x6d\x65\x72\137\x73\x65\164\x75\x70\x2e\160\150\160", "\x25\145\162\162\x6f\162" => $kn->getMessage()));
        }
    }
    function verifyLicense($s0)
    {
        $nD = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\x6f\x61\x73\57\x61\x70\x69\57\142\141\x63\x6b\165\160\143\x6f\144\145\57\166\145\162\x69\x66\171";
        $YO = \Drupal::config("\x6d\x69\x6e\151\x6f\162\141\x6e\x67\x65\x5f\163\x61\155\154\x2e\163\145\164\164\151\x6e\x67\163")->get("\x6d\151\156\151\157\162\141\x6e\147\145\137\163\x61\155\154\137\143\x75\163\164\157\x6d\145\x72\137\x69\x64");
        $Zm = \Drupal::config("\x6d\x69\x6e\151\157\x72\141\x6e\x67\145\137\x73\x61\155\x6c\x2e\x73\145\164\164\151\x6e\x67\163")->get("\155\x69\156\x69\157\162\141\x6e\x67\145\x5f\163\x61\x6d\154\x5f\143\x75\163\164\x6f\155\145\x72\137\141\x70\151\x5f\153\x65\171");
        global $base_url;
        $eV = round(microtime(true) * 1000);
        $Ag = $YO . number_format($eV, 0, '', '') . $Zm;
        $sq = hash("\163\150\x61\65\x31\62", $Ag);
        $ed = "\x43\165\163\164\x6f\155\145\162\x2d\x4b\145\171\x3a\x20" . $YO;
        $lh = "\124\x69\x6d\x65\x73\164\x61\x6d\x70\72\40" . number_format($eV, 0, '', '');
        $tM = "\101\x75\x74\x68\157\x72\151\172\x61\x74\x69\157\156\x3a\40" . $sq;
        $HL = '';
        $HL = array("\x63\x6f\x64\x65" => $s0, "\x63\x75\163\x74\157\x6d\145\x72\113\x65\171" => $YO, "\141\x64\144\151\164\x69\157\156\x61\154\x46\x69\145\x6c\144\x73" => array("\x66\151\145\x6c\144\x31" => $base_url));
        $b1 = json_encode($HL);
        try {
            $DI = \Drupal::httpClient()->request("\x50\117\123\x54", $nD, ["\142\x6f\144\x79" => $b1, "\x61\154\x6c\x6f\x77\x5f\x72\145\x64\x69\162\145\x63\164\x73" => TRUE, "\x68\164\164\x70\137\x65\x72\x72\157\x72\163" => FALSE, "\144\145\143\157\x64\145\137\143\x6f\156\164\145\156\164" => true, "\166\145\162\x69\x66\171" => FALSE, "\x68\145\x61\144\145\162\x73" => array("\x43\x6f\x6e\164\145\156\x74\x2d\124\171\x70\x65" => "\141\160\160\154\x69\x63\x61\x74\151\157\156\57\x6a\163\157\156", "\x43\x75\x73\164\157\155\x65\x72\55\x4b\145\x79" => $YO, "\124\151\x6d\x65\x73\x74\x61\155\x70" => $eV, "\101\x75\164\x68\x6f\x72\x69\172\x61\x74\151\x6f\x6e" => $sq)]);
            return $DI->getBody()->getContents();
        } catch (RequestException $kn) {
            \Drupal::logger("\x6d\151\x6e\x69\x6f\162\x61\x6e\147\x65\x5f\x73\141\155\154")->notice("\105\x72\x72\157\162\x20\x61\164\x20\x25\x6d\x65\164\150\x6f\x64\40\157\146\x20\45\x66\x69\x6c\145\x3a\40\x25\x65\162\162\x6f\x72", array("\x25\155\145\164\150\x6f\144" => "\x63\150\x65\143\x6b\x43\x75\163\x74\157\155\145\162", "\45\x66\151\x6c\145" => "\x63\x75\x73\164\x6f\x6d\145\x72\137\163\145\x74\165\160\56\x70\x68\160", "\x25\x65\162\x72\157\x72" => $kn->getMessage()));
        }
    }
    function updateStatus()
    {
        $nD = MiniorangeSAMLConstants::BASE_URL . "\x2f\x6d\157\141\163\57\x61\x70\151\x2f\x62\141\143\153\165\160\x63\157\x64\145\57\x75\x70\x64\x61\x74\145\x73\x74\141\164\165\163";
        $YO = \Drupal::config("\x6d\151\x6e\x69\x6f\x72\x61\x6e\147\x65\137\x73\x61\x6d\154\56\163\145\164\x74\x69\156\x67\x73")->get("\x6d\151\x6e\x69\157\162\x61\x6e\147\145\x5f\x73\x61\x6d\154\137\143\165\x73\x74\157\x6d\x65\x72\x5f\151\144");
        $Zm = \Drupal::config("\155\x69\x6e\151\x6f\162\141\x6e\x67\145\x5f\163\141\155\x6c\x2e\163\145\x74\x74\151\156\147\163")->get("\x6d\151\156\x69\157\162\x61\x6e\x67\x65\x5f\x73\141\x6d\x6c\137\143\165\x73\x74\x6f\155\x65\x72\137\141\160\151\137\x6b\145\171");
        $eV = round(microtime(true) * 1000);
        $Ag = $YO . number_format($eV, 0, '', '') . $Zm;
        $sq = hash("\x73\150\141\x35\61\62", $Ag);
        $ed = "\103\165\x73\x74\157\155\x65\162\x2d\x4b\x65\171\x3a\x20" . $YO;
        $lh = "\x54\x69\x6d\x65\x73\164\141\x6d\x70\x3a\x20" . number_format($eV, 0, '', '');
        $tM = "\101\165\164\x68\x6f\162\151\x7a\141\164\151\x6f\156\x3a\40" . $sq;
        $eQ = \Drupal::config("\155\x69\156\151\157\x72\141\156\147\x65\x5f\163\x61\x6d\x6c\x2e\163\145\x74\164\x69\x6e\147\163")->get("\x6d\x69\x6e\151\157\162\141\x6e\147\145\x5f\163\141\x6d\154\137\x63\165\x73\164\x6f\x6d\145\162\137\x61\x64\x6d\x69\x6e\137\164\157\x6b\x65\x6e");
        $s0 = AESEncryption::decrypt_data(\Drupal::config("\155\x69\156\151\x6f\x72\141\x6e\147\145\137\x73\141\x6d\154\x2e\x73\x65\x74\x74\x69\156\147\x73")->get("\x6d\151\156\151\x6f\162\x61\156\147\x65\137\x73\141\x6d\x6c\137\x6c\x69\143\x65\156\163\145\x5f\x6b\145\171"), $eQ);
        $HL = array("\143\157\x64\145" => $s0, "\143\165\x73\164\x6f\155\145\x72\x4b\145\171" => $YO);
        $b1 = json_encode($HL);
        try {
            $DI = \Drupal::httpClient()->request("\120\x4f\123\x54", $nD, ["\x62\x6f\x64\x79" => $b1, "\141\154\154\157\x77\x5f\162\145\x64\151\162\145\x63\x74\163" => TRUE, "\150\x74\164\160\137\145\162\x72\157\x72\x73" => FALSE, "\x64\145\143\157\x64\x65\x5f\143\157\156\x74\x65\156\x74" => true, "\x76\145\162\151\146\171" => FALSE, "\x68\x65\141\144\x65\162\x73" => array("\x43\157\156\164\145\156\x74\55\124\x79\160\x65" => "\141\160\x70\154\151\x63\x61\x74\151\x6f\156\x2f\x6a\x73\157\x6e", "\x43\165\163\164\157\x6d\145\162\x2d\113\145\171" => $YO, "\x54\151\155\145\x73\164\141\x6d\x70" => $eV, "\x41\x75\164\x68\157\162\x69\172\141\164\151\x6f\156" => $sq)]);
            return $DI->getBody()->getContents();
        } catch (RequestException $kn) {
            echo "\122\145\x71\165\145\163\164\40\x45\162\162\157\162\72" . $kn->getMessage();
        }
    }
    function ccl()
    {
        $nD = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\157\141\163\57\162\x65\163\164\57\x63\165\163\x74\157\x6d\145\x72\x2f\154\x69\143\145\x6e\x73\x65";
        $YO = \Drupal::config("\155\151\156\151\x6f\x72\x61\156\x67\145\x5f\x73\x61\155\x6c\56\163\145\164\164\x69\x6e\147\163")->get("\x6d\x69\156\151\x6f\162\141\156\x67\145\x5f\x73\141\155\x6c\x5f\x63\165\x73\164\157\x6d\145\x72\137\x69\x64");
        $Zm = \Drupal::config("\155\151\x6e\x69\x6f\162\x61\156\147\x65\137\163\141\155\x6c\x2e\x73\x65\164\x74\x69\x6e\x67\x73")->get("\155\151\156\x69\x6f\x72\x61\156\x67\x65\x5f\x73\141\155\154\137\x63\x75\x73\x74\x6f\155\145\x72\137\x61\160\x69\x5f\x6b\x65\171");
        $eV = round(microtime(TRUE) * 1000);
        $Ag = $YO . number_format($eV, 0, '', '') . $Zm;
        $sq = hash("\163\150\x61\65\61\62", $Ag);
        $ed = "\103\x75\x73\x74\157\x6d\x65\162\x2d\113\x65\x79\72\x20" . $YO;
        $lh = "\124\x69\155\x65\x73\x74\141\x6d\160\x3a\x20" . number_format($eV, 0, '', '');
        $tM = "\x41\165\164\150\x6f\162\151\x7a\141\164\151\x6f\156\x3a\40" . $sq;
        $HL = array("\x63\x75\x73\x74\157\155\145\162\x49\144" => $YO, "\141\160\160\154\x69\143\x61\164\151\x6f\x6e\x4e\x61\155\145" => Utilities::getSamlRequestPlanName());
        $b1 = json_encode($HL);
        try {
            $DI = \Drupal::httpClient()->request("\x50\x4f\123\124", $nD, ["\142\x6f\x64\171" => $b1, "\x61\x6c\x6c\x6f\x77\x5f\x72\x65\x64\x69\162\x65\143\164\x73" => TRUE, "\150\x74\164\160\137\x65\x72\162\x6f\x72\x73" => FALSE, "\x64\x65\143\157\144\x65\137\143\157\156\164\x65\156\x74" => true, "\x76\x65\162\151\146\171" => FALSE, "\150\x65\x61\144\x65\162\x73" => array("\x43\157\x6e\164\145\x6e\164\55\124\171\x70\x65" => "\141\x70\x70\x6c\x69\x63\141\164\x69\157\x6e\57\152\x73\x6f\156", "\x43\165\163\164\157\x6d\x65\162\x2d\x4b\x65\171" => $YO, "\x54\151\x6d\x65\163\x74\x61\x6d\160" => $eV, "\x41\x75\164\150\x6f\162\x69\172\x61\164\151\x6f\x6e" => $sq)]);
            return $DI->getBody()->getContents();
        } catch (RequestException $kn) {
            echo "\122\145\x71\165\145\x73\164\40\x45\x72\x72\157\162\72" . $kn->getMessage();
        }
    }
}
